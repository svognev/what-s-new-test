{"version":3,"sources":["services/version-info-service.js","components/title-block/index.js","components/title-block/title-block.js","components/presentation-block/presentation-block.js","components/version-title/index.js","components/version-title/version-title.js","components/feature/index.js","components/feature/feature.js","components/version-info/index.js","components/version-info/version-info.js","components/version/index.js","components/version/version.js","components/versions-block/index.js","components/versions-block/versions-block.js","App.js","serviceWorker.js","index.js"],"names":["VersionInfoService","_base","url","fetch","concat","this","res","ok","Error","status","json","getInfo","versions","TitleBlock","react_default","a","createElement","className","PresentationBlock","_ref","number","title","innovation","toUpperCase","VersionTitle","props","eventHandler","date","buttonClassName","opened","onClick","Feature","name","icon","description","style","backgroundImage","VersionInfo","features","getFeatures","featuresInfo","numOfFeatures","isMobile","arguments","length","undefined","featuresArray","i","_featuresInfo$i","descriptionShort","descriptionLong","push","components_feature","Object","assign","key","Version","state","_this","openVersionInfo","setState","_this$props$info","info","others","objectWithoutProperties","components_version_title","components_version_info","Component","VersionsBlock","mappedVersions","map","version","idx","components_version","App","infoService","lang","onVersionsLoaded","updateVersions","getAllVersionsEN","then","_this$state$versions$","components_title_block","presentation_block_presentation_block","components_versions_block","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5199494.chunk.js","sourcesContent":["class VersionInfoService {\r\n    _base = \"https://my-json-server.typicode.com/svognev/what-s-new-fake-server\"\r\n    \r\n    async getInfo(url) {\r\n        const res = await fetch(`${this._base}${url}`);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}. Res status: ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    async getAllVersionsEN() {\r\n        const versions = await this.getInfo(\"/en\");\r\n        return versions;\r\n    }\r\n\r\n}\r\n\r\nexport default VersionInfoService;","import TitleBlock from \"./title-block\";\r\nexport default TitleBlock;","import React from \"react\";\r\nimport \"./title-block.css\";\r\n\r\nconst TitleBlock = () => {\r\n    return (\r\n        <div className=\"TitleBlock\">\r\n        <div className=\"TitleBlock-Heading TitleHeading\">\r\n          <span className=\"TitleHeading-Text\">\r\n            Our latest features\r\n          </span>\r\n        </div>\r\n        <div className=\"TitleBlock-Subheading TitleSubheading\">\r\n          <span className=\"SubtitleHeading-Text\">\r\n            We are always working hard to make SMASHDOCS the best platform for your documentary needs.\r\n            Check out some of the most important things we've been up to lately...\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TitleBlock;","import React from \"react\";\r\nimport \"./presentation-block.css\";\r\n\r\nconst PresentationBlock = ({number, title, innovation}) => {\r\n    return (\r\n        <div className=\"PresentationBlock\">\r\n        <div className=\"PresentationBlock-TopCaption PresentationCaption\">\r\n          <span className=\"PresentationCaption-Text\">\r\n            A new feature of <span className=\"PresentationCaption-Text_heavy\">version {number}</span></span>\r\n        </div>\r\n        <div className=\"PresentationBlock-Heading PresentationHeading\">\r\n          <span className=\"PresentationHeading-Text\">\r\n            {title.toUpperCase()}\r\n          </span>\r\n        </div>\r\n        <div className=\"PresentationBlock-BottomCaption PresentationCaption PresentationCaption_mobileBottom\">\r\n          <span className=\"PresentationCaption-Text\">\r\n            {innovation}\r\n          </span>\r\n        </div>\r\n        <div className=\"PresentationBlock-Button\">\r\n          <button className=\"PresentationButton\">\r\n            READ MORE\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default PresentationBlock;","import VersionTitle from \"./version-title\";\r\nexport default VersionTitle;","import React from \"react\";\r\nimport \"./version-title.css\";\r\n\r\nconst VersionTitle = (props) => {\r\n    const { eventHandler, number, date, opened } = props;\r\n    let buttonClassName = \"VersionTitle-Button\";\r\n    if (opened) {\r\n        buttonClassName += \" VersionTitle-Button_opened\";\r\n    }\r\n    return (\r\n        <div className=\"VersionTitle\">\r\n          <button className={buttonClassName} onClick={eventHandler} />\r\n          <span className=\"VersionTitle-Text\">\r\n            Version {number} <span className=\"VersionTitle-Text_releaseDate\"><span className=\"VersionTitle-Text_dash\">- </span>released on {date}</span>\r\n          </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VersionTitle;","import Feature from \"./feature\";\r\nexport default Feature;","import React from \"react\";\r\nimport \"./feature.css\";\r\n\r\nconst Feature = (props) => {\r\n    const {name, icon, description} = props;\r\n    return (\r\n        <div className=\"Feature\">\r\n            <div className=\"Feature-Icon\" style={{ \"backgroundImage\": `url(${icon})` }}>\r\n            </div>\r\n            <div className=\"Feature-Title\">\r\n                <span className=\"Feature-TitleText\">{name}</span>\r\n            </div>\r\n            <div className=\"Feature-Caption\">\r\n                <span className=\"Feature-CaptionText\">{description}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feature;\r\n\r\n\r\n\r\n","import VersionInfo from \"./version-info\";\r\nexport default VersionInfo;","import React from \"react\";\r\nimport \"./version-info.css\";\r\nimport Feature from \"../feature\";\r\n\r\nconst VersionInfo = ({features}) => {\r\n\r\n  const getFeatures = (featuresInfo, numOfFeatures, isMobile = false) => {\r\n    const featuresArray = [];\r\n\r\n    for (let i = 0; i < featuresInfo.length && i < numOfFeatures; i++) {\r\n      const { name, icon, descriptionShort, descriptionLong } = featuresInfo[i];\r\n      const description = isMobile ? descriptionShort : descriptionLong;\r\n\r\n      featuresArray.push(<Feature {...{name, icon, description}} key={name} />)\r\n    }\r\n    return featuresArray;\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div className=\"VersionInfo\">\r\n            <div className=\"VersionInfo-FeaturesList FeaturesList\">\r\n              { getFeatures(features, 3) }\r\n            </div>\r\n            <div className=\"VersionInfo-SeeAll SeeAllFeatures\">\r\n              <a className=\"SeeAllFeatures-Link\">See all features <div className=\"SeeAllFeatures-Arrow\"></div></a>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"VersionInfo_mobile\">\r\n          <div className=\"VersionInfo-FeaturesList FeaturesList\">\r\n            { getFeatures(features, 4, true) }\r\n          </div>\r\n          <div className=\"VersionInfo-SeeAll SeeAllFeatures\">\r\n            <a className=\"SeeAllFeatures-Link\">See all features <div className=\"SeeAllFeatures-Arrow\"></div></a>\r\n          </div>\r\n        </div>\r\n      </div>       \r\n  );\r\n}\r\n\r\nexport default VersionInfo;","import Version from \"./version\";\r\nexport default Version;","import React, { Component } from \"react\";\r\nimport \"./version.css\";\r\nimport VersionTitle from \"../version-title\";\r\nimport VersionInfo from \"../version-info\";\r\n\r\n\r\nclass Version extends Component {\r\n    state = {\r\n        opened: this.props.opened,\r\n    }\r\n\r\n    openVersionInfo = () => {\r\n        this.setState(({ opened }) => {\r\n            return {\r\n                opened: !opened\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { features, ...others } = this.props.info;\r\n        return (\r\n            <div className=\"Version\">\r\n                <VersionTitle {...others} eventHandler={this.openVersionInfo} opened={this.state.opened} />\r\n                { this.state.opened ? <VersionInfo features={features} /> : null }\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nexport default Version;","import VersionsBlock from \"./versions-block\";\r\nexport default VersionsBlock;","import React from \"react\";\r\nimport \"./versions-block.css\";\r\nimport Version from \"../version\";\r\n\r\nconst VersionsBlock = ({versions}) => {\r\n    const mappedVersions = versions.map((version, idx) => {\r\n      return (\r\n          <Version info={version} opened={idx === 0} key={version.number} />\r\n      );\r\n    })\r\n    return (\r\n        <div className=\"VersionsBlock\">\r\n            <div className=\"VersionsBlock-List VersionsList\">\r\n                {mappedVersions}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VersionsBlock;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport VersionInfoService from \"./services/version-info-service\";\nimport TitleBlock from \"./components/title-block\";\nimport PresentationBlock from \"./components/presentation-block/presentation-block\";\nimport VersionsBlock from \"./components/versions-block\";\n\nclass App extends Component {\n  infoService = new VersionInfoService();\n  \n  state = {\n    lang: \"en\",\n    versions: null,\n  }\n\n  componentDidMount() {\n    this.updateVersions();\n  }\n\n  onVersionsLoaded = versions => {\n    this.setState({ versions });\n  }\n\n  updateVersions = () => {\n    if (this.state.lang === \"en\") {\n      this.infoService.getAllVersionsEN().then(versions => {\n        this.onVersionsLoaded(versions);\n      });\n    }\n  }\n  \n\n  render() {\n    if (this.state.versions) {\n      const { number, title, innovation } = this.state.versions[0];\n      return (\n        <div className=\"App\">\n          <TitleBlock />\n          <PresentationBlock { ...{number, title, innovation} }/>\n          <VersionsBlock versions={this.state.versions} />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <TitleBlock />\n        </div>\n      );\n    }\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}